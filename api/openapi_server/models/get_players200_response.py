from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.player_lite import PlayerLite
from openapi_server import util

from openapi_server.models.player_lite import PlayerLite  # noqa: E501

class GetPlayers200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, players=None, count=None):  # noqa: E501
        """GetPlayers200Response - a model defined in OpenAPI

        :param players: The players of this GetPlayers200Response.  # noqa: E501
        :type players: List[PlayerLite]
        :param count: The count of this GetPlayers200Response.  # noqa: E501
        :type count: int
        """
        self.openapi_types = {
            'players': List[PlayerLite],
            'count': int
        }

        self.attribute_map = {
            'players': 'players',
            'count': 'count'
        }

        self._players = players
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'GetPlayers200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_players_200_response of this GetPlayers200Response.  # noqa: E501
        :rtype: GetPlayers200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def players(self) -> List[PlayerLite]:
        """Gets the players of this GetPlayers200Response.


        :return: The players of this GetPlayers200Response.
        :rtype: List[PlayerLite]
        """
        return self._players

    @players.setter
    def players(self, players: List[PlayerLite]):
        """Sets the players of this GetPlayers200Response.


        :param players: The players of this GetPlayers200Response.
        :type players: List[PlayerLite]
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")  # noqa: E501

        self._players = players

    @property
    def count(self) -> int:
        """Gets the count of this GetPlayers200Response.


        :return: The count of this GetPlayers200Response.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this GetPlayers200Response.


        :param count: The count of this GetPlayers200Response.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count
