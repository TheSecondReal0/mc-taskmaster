from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, points=None, min_session=None, max_session=None):  # noqa: E501
        """CreateTaskRequest - a model defined in OpenAPI

        :param description: The description of this CreateTaskRequest.  # noqa: E501
        :type description: str
        :param points: The points of this CreateTaskRequest.  # noqa: E501
        :type points: int
        :param min_session: The min_session of this CreateTaskRequest.  # noqa: E501
        :type min_session: int
        :param max_session: The max_session of this CreateTaskRequest.  # noqa: E501
        :type max_session: int
        """
        self.openapi_types = {
            'description': str,
            'points': int,
            'min_session': int,
            'max_session': int
        }

        self.attribute_map = {
            'description': 'description',
            'points': 'points',
            'min_session': 'min_session',
            'max_session': 'max_session'
        }

        self._description = description
        self._points = points
        self._min_session = min_session
        self._max_session = max_session

    @classmethod
    def from_dict(cls, dikt) -> 'CreateTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The create_task_request of this CreateTaskRequest.  # noqa: E501
        :rtype: CreateTaskRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this CreateTaskRequest.


        :return: The description of this CreateTaskRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateTaskRequest.


        :param description: The description of this CreateTaskRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def points(self) -> int:
        """Gets the points of this CreateTaskRequest.


        :return: The points of this CreateTaskRequest.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points: int):
        """Sets the points of this CreateTaskRequest.


        :param points: The points of this CreateTaskRequest.
        :type points: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def min_session(self) -> int:
        """Gets the min_session of this CreateTaskRequest.


        :return: The min_session of this CreateTaskRequest.
        :rtype: int
        """
        return self._min_session

    @min_session.setter
    def min_session(self, min_session: int):
        """Sets the min_session of this CreateTaskRequest.


        :param min_session: The min_session of this CreateTaskRequest.
        :type min_session: int
        """

        self._min_session = min_session

    @property
    def max_session(self) -> int:
        """Gets the max_session of this CreateTaskRequest.


        :return: The max_session of this CreateTaskRequest.
        :rtype: int
        """
        return self._max_session

    @max_session.setter
    def max_session(self, max_session: int):
        """Sets the max_session of this CreateTaskRequest.


        :param max_session: The max_session of this CreateTaskRequest.
        :type max_session: int
        """

        self._max_session = max_session
