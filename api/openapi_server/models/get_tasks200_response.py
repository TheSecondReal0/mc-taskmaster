from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.task import Task
from openapi_server import util

from openapi_server.models.task import Task  # noqa: E501

class GetTasks200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tasks=None, count=None):  # noqa: E501
        """GetTasks200Response - a model defined in OpenAPI

        :param tasks: The tasks of this GetTasks200Response.  # noqa: E501
        :type tasks: List[Task]
        :param count: The count of this GetTasks200Response.  # noqa: E501
        :type count: int
        """
        self.openapi_types = {
            'tasks': List[Task],
            'count': int
        }

        self.attribute_map = {
            'tasks': 'tasks',
            'count': 'count'
        }

        self._tasks = tasks
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'GetTasks200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_tasks_200_response of this GetTasks200Response.  # noqa: E501
        :rtype: GetTasks200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tasks(self) -> List[Task]:
        """Gets the tasks of this GetTasks200Response.


        :return: The tasks of this GetTasks200Response.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Task]):
        """Sets the tasks of this GetTasks200Response.


        :param tasks: The tasks of this GetTasks200Response.
        :type tasks: List[Task]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")  # noqa: E501

        self._tasks = tasks

    @property
    def count(self) -> int:
        """Gets the count of this GetTasks200Response.


        :return: The count of this GetTasks200Response.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this GetTasks200Response.


        :param count: The count of this GetTasks200Response.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count
