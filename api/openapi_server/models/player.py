from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server import util

from openapi_server.models.category import Category  # noqa: E501

class Player(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, discord_id=None, score=None, categories=None, tasks=None):  # noqa: E501
        """Player - a model defined in OpenAPI

        :param id: The id of this Player.  # noqa: E501
        :type id: str
        :param discord_id: The discord_id of this Player.  # noqa: E501
        :type discord_id: str
        :param score: The score of this Player.  # noqa: E501
        :type score: int
        :param categories: The categories of this Player.  # noqa: E501
        :type categories: List[Category]
        :param tasks: The tasks of this Player.  # noqa: E501
        :type tasks: List[Category]
        """
        self.openapi_types = {
            'id': str,
            'discord_id': str,
            'score': int,
            'categories': List[Category],
            'tasks': List[Category]
        }

        self.attribute_map = {
            'id': 'id',
            'discord_id': 'discord_id',
            'score': 'score',
            'categories': 'categories',
            'tasks': 'tasks'
        }

        self._id = id
        self._discord_id = discord_id
        self._score = score
        self._categories = categories
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Player.


        :return: The id of this Player.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Player.


        :param id: The id of this Player.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def discord_id(self) -> str:
        """Gets the discord_id of this Player.


        :return: The discord_id of this Player.
        :rtype: str
        """
        return self._discord_id

    @discord_id.setter
    def discord_id(self, discord_id: str):
        """Sets the discord_id of this Player.


        :param discord_id: The discord_id of this Player.
        :type discord_id: str
        """
        if discord_id is None:
            raise ValueError("Invalid value for `discord_id`, must not be `None`")  # noqa: E501

        self._discord_id = discord_id

    @property
    def score(self) -> int:
        """Gets the score of this Player.


        :return: The score of this Player.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this Player.


        :param score: The score of this Player.
        :type score: int
        """

        self._score = score

    @property
    def categories(self) -> List[Category]:
        """Gets the categories of this Player.


        :return: The categories of this Player.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: List[Category]):
        """Sets the categories of this Player.


        :param categories: The categories of this Player.
        :type categories: List[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def tasks(self) -> List[Category]:
        """Gets the tasks of this Player.


        :return: The tasks of this Player.
        :rtype: List[Category]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Category]):
        """Sets the tasks of this Player.


        :param tasks: The tasks of this Player.
        :type tasks: List[Category]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")  # noqa: E501

        self._tasks = tasks
